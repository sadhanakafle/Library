// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User{
  id          Int           @id@default(autoincrement())
  name        String        @db.VarChar(191)
  email       String        @db.VarChar(191)@unique        
  mobile      String        @db.VarChar(191)@unique
  password    String        @db.VarChar(191)
  created_at  DateTime      @default(now())
  update_at  DateTime      @updatedAt
  members Member[]
  books Book[] 
  transactions Transaction[]
  @@map("users")
}

model Member{
  id          Int           @id@default(autoincrement())
  user_id     Int
  name        String        @db.VarChar(191)
  email       String        @db.VarChar(191)@unique
  mobile      String        @db.VarChar(191)@unique
  address     String        @db.VarChar(191)
  created_at  DateTime      @default(now())
  update_at   DateTime      @updatedAt
  user User @relation (fields: [user_id], references:[id])
  transactions Transaction[]
  @@map("members")

}

model Book{
  id   Int                                @id@default(autoincrement())
  user_id Int
  title String                             @db.VarChar(191)
  author String                            @db.VarChar(191)
  quantity Int
  availability   Boolean                     @default(false)
  created_at  DateTime                       @default(now())
  update_at  DateTime                        @updatedAt
  user User @relation(fields: [user_id], references:[id])
  transactions Transaction[]
  @@map("books")
}

model Transaction{
  id                  Int                 @id @default(autoincrement())
  user_id             Int
  member_id           Int
  book_id             Int
  transactionDate     DateTime             @default(now())
  type                ReservationType
  user User                               @relation(fields:[user_id], references: [id])
  member Member                           @relation(fields: [member_id], references: [id])
  book   Book                             @relation(fields: [book_id], references: [id])
  
}
enum ReservationType {
  BORROW
  RETURN
}